[
  { "title": "GET Request", "code": "fetch('https://api.example.com/resource')\n  .then(response => response.json())\n  .then(data => console.log(data));" },
  { "title": "POST Request", "code": "fetch('https://api.example.com/resource', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ key: 'value' })\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "PUT Request", "code": "fetch('https://api.example.com/resource/1', {\n  method: 'PUT',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ key: 'newValue' })\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "DELETE Request", "code": "fetch('https://api.example.com/resource/1', {\n  method: 'DELETE'\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "Handling Errors", "code": "fetch('https://api.example.com/resource')\n  .then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));" },
  { "title": "Async/Await for GET Request", "code": "async function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/resource');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\nfetchData();" },
  { "title": "Setting Custom Headers", "code": "fetch('https://api.example.com/resource', {\n  method: 'GET',\n  headers: {\n    'Authorization': 'Bearer YOUR_TOKEN',\n    'Accept': 'application/json'\n  }\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "Query Parameters", "code": "const params = new URLSearchParams({\n  search: 'keyword',\n  limit: 10\n});\nfetch(`https://api.example.com/resource?${params}`)\n  .then(response => response.json())\n  .then(data => console.log(data));" },
  { "title": "Sending Form Data", "code": "const formData = new FormData();\nformData.append('key', 'value');\n\nfetch('https://api.example.com/resource', {\n  method: 'POST',\n  body: formData\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "Sending JSON with Credentials", "code": "fetch('https://api.example.com/resource', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  credentials: 'include',\n  body: JSON.stringify({ key: 'value' })\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "Response Types (Text)", "code": "fetch('https://api.example.com/resource')\n  .then(response => response.text())\n  .then(data => console.log(data));" },
  { "title": "Response Types (Blob)", "code": "fetch('https://api.example.com/resource')\n  .then(response => response.blob())\n  .then(imageBlob => {\n    const img = document.createElement('img');\n    img.src = URL.createObjectURL(imageBlob);\n    document.body.appendChild(img);\n  });" },
  { "title": "Response Types (ArrayBuffer)", "code": "fetch('https://api.example.com/resource')\n  .then(response => response.arrayBuffer())\n  .then(buffer => console.log(buffer));" },
  { "title": "POST with URL-Encoded Form Data", "code": "const urlEncodedData = new URLSearchParams();\nurlEncodedData.append('key', 'value');\n\nfetch('https://api.example.com/resource', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  body: urlEncodedData\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "Handling Timeouts", "code": "const controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 5000);\n\nfetch('https://api.example.com/resource', { signal: controller.signal })\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => {\n    if (error.name === 'AbortError') {\n      console.error('Request timed out');\n    } else {\n      console.error('Error:', error);\n    }\n  });" },
  { "title": "JSON Response Handling", "code": "fetch('https://api.example.com/resource')\n  .then(response => response.json())\n  .then(data => console.log(data));" },
  { "title": "GET Request with Params", "code": "const userId = 1;\nfetch(`https://api.example.com/users/${userId}`)\n  .then(response => response.json())\n  .then(data => console.log(data));" },
  { "title": "Basic Authentication", "code": "fetch('https://api.example.com/resource', {\n  method: 'GET',\n  headers: {\n    'Authorization': 'Basic ' + btoa('username:password')\n  }\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "Bearer Token Authentication", "code": "fetch('https://api.example.com/resource', {\n  method: 'GET',\n  headers: {\n    'Authorization': 'Bearer YOUR_TOKEN'\n  }\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "Redirect Handling", "code": "fetch('https://api.example.com/resource', {\n  redirect: 'follow'\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "HTTP Method Override", "code": "fetch('https://api.example.com/resource/1', {\n  method: 'POST',\n  headers: {\n    'X-HTTP-Method-Override': 'DELETE'\n  }\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "Custom Fetch Function", "code": "async function customFetch(url, options = {}) {\n  const response = await fetch(url, options);\n  if (!response.ok) throw new Error('Network response was not ok');\n  return response.json();\n}\ncustomFetch('https://api.example.com/resource')\n  .then(data => console.log(data));" },
  { "title": "Rate Limiting Example", "code": "fetch('https://api.example.com/resource', {\n  headers: {\n    'X-RateLimit-Limit': '100'\n  }\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "Retrying Failed Requests", "code": "async function fetchWithRetry(url, retries = 3) {\n  for (let i = 0; i < retries; i++) {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Network response was not ok');\n      return await response.json();\n    } catch (error) {\n      if (i === retries - 1) throw error;\n    }\n  }\n}\nfetchWithRetry('https://api.example.com/resource')\n  .then(data => console.log(data))\n  .catch(error => console.error('Failed:', error));" },
  { "title": "Streaming Response", "code": "const response = await fetch('https://api.example.com/resource');\nconst reader = response.body.getReader();\nconst decoder = new TextDecoder('utf-8');\n\nwhile (true) {\n  const { done, value } = await reader.read();\n  if (done) break;\n  console.log(decoder.decode(value));\n}" },
  { "title": "WebSocket Connection", "code": "const socket = new WebSocket('wss://api.example.com/socket');\n\nsocket.onopen = () => {\n  console.log('Connection opened');\n};" },
  { "title": "WebSocket Message Handling", "code": "socket.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  console.log('Message from server:', data);\n};" },
  { "title": "WebSocket Error Handling", "code": "socket.onerror = (error) => {\n  console.error('WebSocket Error:', error);\n};" },
  { "title": "WebSocket Closing Connection", "code": "socket.onclose = (event) => {\n  console.log('Connection closed:', event);\n};" },
  { "title": "Sending Message via WebSocket", "code": "socket.send(JSON.stringify({ type: 'greet', message: 'Hello!' }));" },
  { "title": "CORS Example", "code": "fetch('https://api.example.com/resource', {\n  method: 'GET',\n  headers: {\n    'Origin': 'http://your-website.com'\n  }\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "Uploading Files with Fetch", "code": "const fileInput = document.querySelector('input[type=\"file\"]');\nconst formData = new FormData();\n\nformData.append('file', fileInput.files[0]);\n\nfetch('https://api.example.com/upload', {\n  method: 'POST',\n  body: formData\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "Handling 404 Errors", "code": "fetch('https://api.example.com/resource/999')\n  .then(response => {\n    if (response.status === 404) {\n      console.error('Resource not found');\n    }\n    return response.json();\n  })\n  .then(data => console.log(data));" },
  { "title": "Handling 500 Errors", "code": "fetch('https://api.example.com/resource')\n  .then(response => {\n    if (response.status === 500) {\n      console.error('Server error');\n    }\n    return response.json();\n  })\n  .then(data => console.log(data));" },
  { "title": "Using AbortController", "code": "const controller = new AbortController();\n\nfetch('https://api.example.com/resource', { signal: controller.signal })\n  .then(response => response.json())\n  .then(data => console.log(data));\n\n// Abort the request\ncontroller.abort();" },
  { "title": "Retry Logic with Backoff", "code": "async function fetchWithRetry(url, retries = 3, backoff = 300) {\n  for (let i = 0; i < retries; i++) {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Network response was not ok');\n      return await response.json();\n    } catch (error) {\n      if (i === retries - 1) throw error;\n      await new Promise(resolve => setTimeout(resolve, backoff));\n      backoff *= 2;\n    }\n  }\n}\nfetchWithRetry('https://api.example.com/resource')\n  .then(data => console.log(data));" },
  { "title": "Loading Indicators", "code": "const loadingIndicator = document.getElementById('loading');\nloadingIndicator.style.display = 'block';\n\nfetch('https://api.example.com/resource')\n  .then(response => response.json())\n  .then(data => {\n    console.log(data);\n    loadingIndicator.style.display = 'none';\n  });" },
  { "title": "Fetching JSONP", "code": "const script = document.createElement('script');\nscript.src = 'https://api.example.com/resource?callback=myCallback';\ndocument.body.appendChild(script);\n\nfunction myCallback(data) {\n  console.log(data);\n}" },
  { "title": "Paginated Requests", "code": "const fetchPage = async (page) => {\n  const response = await fetch(`https://api.example.com/resource?page=${page}`);\n  const data = await response.json();\n  console.log(data);\n};\n\nfetchPage(1);" },
  { "title": "Handling Different Response Formats", "code": "async function fetchData(url) {\n  const response = await fetch(url);\n  const contentType = response.headers.get('content-type');\n\n  if (contentType.includes('application/json')) {\n    return response.json();\n  } else if (contentType.includes('text/html')) {\n    return response.text();\n  }\n}\n\nfetchData('https://api.example.com/resource').then(data => console.log(data));" },
  { "title": "Throttling Requests", "code": "let lastFetch = 0;\nconst fetchWithThrottle = async (url) => {\n  const now = Date.now();\n  if (now - lastFetch < 2000) return;\n  lastFetch = now;\n  const response = await fetch(url);\n  const data = await response.json();\n  console.log(data);\n};" },
  { "title": "Using Fetch with Proxy", "code": "fetch('https://api.example.com/resource', {\n  agent: new HttpsProxyAgent('http://your-proxy.com:8080')\n})\n.then(response => response.json())\n.then(data => console.log(data));" },
  { "title": "Image Upload Preview", "code": "const fileInput = document.getElementById('file-input');\nfileInput.addEventListener('change', (event) => {\n  const file = event.target.files[0];\n  const reader = new FileReader();\n  reader.onload = (e) => {\n    const img = document.createElement('img');\n    img.src = e.target.result;\n    document.body.appendChild(img);\n  };\n  reader.readAsDataURL(file);\n});" },
  { "title": "Loading Data on Scroll", "code": "window.onscroll = async () => {\n  if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n    const nextPage = getNextPage();\n    const response = await fetch(`https://api.example.com/resource?page=${nextPage}`);\n    const data = await response.json();\n    console.log(data);\n  }\n};" },
  { "title": "Caching Responses", "code": "const cache = new Map();\n\nasync function fetchWithCache(url) {\n  if (cache.has(url)) {\n    return cache.get(url);\n  }\n  const response = await fetch(url);\n  const data = await response.json();\n  cache.set(url, data);\n  return data;\n}\n\nfetchWithCache('https://api.example.com/resource').then(data => console.log(data));" },
  { "title": "Dynamic URL Creation", "code": "const userId = 1;\nconst url = `https://api.example.com/users/${userId}`;\nfetch(url)\n  .then(response => response.json())\n  .then(data => console.log(data));" },
  { "title": "Headers Inspection", "code": "fetch('https://api.example.com/resource')\n  .then(response => {\n    console.log('Headers:', response.headers);\n    return response.json();\n  })\n  .then(data => console.log(data));" },
  { "title": "Using Service Workers for Caching", "code": "self.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        return response || fetch(event.request);\n      })\n  );\n});" },
  { "title": "Polling an API", "code": "setInterval(async () => {\n  const response = await fetch('https://api.example.com/resource');\n  const data = await response.json();\n  console.log(data);\n}, 5000);" },
  { "title": "Webhooks Example", "code": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/webhook', (req, res) => {\n  console.log('Received webhook:', req.body);\n  res.sendStatus(200);\n});\napp.listen(3000);" }
]