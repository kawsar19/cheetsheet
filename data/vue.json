[
  { "title": "Vue Instance", "code": "new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue!'\n  }\n});" },
  { "title": "Template Syntax", "code": "<div>{{ message }}</div>" },
  { "title": "Methods", "code": "methods: {\n  greet() {\n    return 'Hello!';\n  }\n}" },
  { "title": "Computed Properties", "code": "computed: {\n  reversedMessage() {\n    return this.message.split('').reverse().join('');\n  }\n}" },
  { "title": "Watchers", "code": "watch: {\n  message(newValue, oldValue) {\n    console.log('Changed from', oldValue, 'to', newValue);\n  }\n}" },
  { "title": "Conditional Rendering", "code": "<div v-if=\"seen\">Now you see me</div>" },
  { "title": "List Rendering", "code": "<ul>\n  <li v-for=\"item in items\" :key=\"item.id\">{{ item.text }}</li>\n</ul>" },
  { "title": "Handling Events", "code": "<button v-on:click=\"doSomething\">Click me</button>" },
  { "title": "Event Methods", "code": "methods: {\n  doSomething() {\n    alert('Clicked!');\n  }\n}" },
  { "title": "Event Modifiers", "code": "<form v-on:submit.prevent=\"onSubmit\"></form>" },
  { "title": "Two-way Binding", "code": "<input v-model=\"message\">" },
  { "title": "v-bind for Attributes", "code": "<a v-bind:href=\"url\">Link</a>" },
  { "title": "v-bind Shorthand", "code": "<a :href=\"url\">Link</a>" },
  { "title": "v-on Shorthand", "code": "<button @click=\"doSomething\">Click me</button>" },
  { "title": "Dynamic Classes", "code": "<div :class=\"{ active: isActive }\"></div>" },
  { "title": "Inline Styles", "code": "<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>" },
  { "title": "Component Basics", "code": "Vue.component('my-component', {\n  template: '<div>A custom component!</div>'\n});" },
  { "title": "Component Props", "code": "props: ['title'],\n template: '<h3>{{ title }}</h3>'" },
  { "title": "Parent-Child Communication", "code": "<child-component v-bind:message=\"parentMessage\"></child-component>" },
  { "title": "Emit Events", "code": "this.$emit('enlarge-text')" },
  { "title": "Props Validation", "code": "props: {\n  size: {\n    type: Number,\n    required: true\n  }\n}" },
  { "title": "Custom Directives", "code": "Vue.directive('focus', {\n  inserted: function (el) {\n    el.focus();\n  }\n});" },
  { "title": "Slots", "code": "<slot></slot>" },
  { "title": "Named Slots", "code": "<slot name=\"header\"></slot>" },
  { "title": "Scoped Slots", "code": "<slot :text=\"msg\"></slot>" },
  { "title": "Dynamic Components", "code": "<component :is=\"currentTabComponent\"></component>" },
  { "title": "Keep-Alive", "code": "<keep-alive>\n  <component :is=\"view\"></component>\n</keep-alive>" },
  { "title": "Lifecycle Hooks", "code": "created() {\n  console.log('Instance created!');\n}" },
  { "title": "Mounted Hook", "code": "mounted() {\n  console.log('Mounted!');\n}" },
  { "title": "Destroyed Hook", "code": "destroyed() {\n  console.log('Instance destroyed!');\n}" },
  { "title": "Updated Hook", "code": "updated() {\n  console.log('Updated!');\n}" },
  { "title": "v-model with Checkbox", "code": "<input type=\"checkbox\" v-model=\"checked\">" },
  { "title": "v-model with Radio", "code": "<input type=\"radio\" v-model=\"picked\" value=\"one\">" },
  { "title": "v-model with Select", "code": "<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n</select>" },
  { "title": "v-model with Multiple Select", "code": "<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n</select>" },
  { "title": "Two-way Binding with Props", "code": "this.$emit('input', newValue)" },
  { "title": "Form Handling", "code": "<form @submit.prevent=\"onSubmit\">\n  <input v-model=\"message\">\n  <button type=\"submit\">Submit</button>\n</form>" },
  { "title": "Async Data", "code": "mounted() {\n  axios.get('/someUrl').then(response => this.info = response.data)\n}" },
  { "title": "Transitions", "code": "<transition name=\"fade\">\n  <p v-if=\"show\">Hello</p>\n</transition>" },
  { "title": "Custom Transition Classes", "code": "<transition\n  enter-active-class=\"animated fadeIn\"\n  leave-active-class=\"animated fadeOut\">\n  <p v-if=\"show\">Hello</p>\n</transition>" },
  { "title": "CSS Animation with Transitions", "code": "<transition :css=\"false\">\n  <p v-if=\"show\">Hello</p>\n</transition>" },
  { "title": "List Transitions", "code": "<transition-group name=\"list\">\n  <div v-for=\"item in items\" :key=\"item\" class=\"list-item\">\n    {{ item }}\n  </div>\n</transition-group>" },
  { "title": "v-pre Directive", "code": "<span v-pre>{{ raw }}</span>" },
  { "title": "v-cloak Directive", "code": "<div v-cloak>{{ message }}</div>" },
  { "title": "v-once Directive", "code": "<span v-once>{{ message }}</span>" },
  { "title": "Filters", "code": "Vue.filter('capitalize', function (value) {\n  return value.charAt(0).toUpperCase() + value.slice(1)\n});" },
  { "title": "Mixins", "code": "const myMixin = {\n  created() {\n    console.log('Mixin hook called');\n  }\n};" },
  { "title": "Global Mixin", "code": "Vue.mixin({\n  created() {\n    console.log('Global Mixin - Created Hook Called');\n  }\n});" },
  { "title": "Reactive Properties", "code": "Vue.set(vm.someObject, 'newProp', 123)" },
  { "title": "Non-Reactive Properties", "code": "Object.freeze(obj)" },
  { "title": "Vue.set Example", "code": "Vue.set(this.someObject, key, value);" },
  { "title": "Dynamic Styles with Object Syntax", "code": "<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>" },
  { "title": "Dynamic Styles with Array Syntax", "code": "<div :style=\"[styleObject, extraStyles]\"></div>" },
  { "title": "Class Binding with Object Syntax", "code": "<div :class=\"{ active: isActive, 'text-danger': hasError }\"></div>" },
  { "title": "Class Binding with Array Syntax", "code": "<div :class=\"[isActive ? 'active' : '', textClass]\"></div>" },
  { "title": "Handling v-for with Objects", "code": "<div v-for=\"(value, key, index) in object\">\n  {{ index }}. {{ key }}: {{ value }}\n</div>" },
  { "title": "Vue Router Basics", "code": "const router = new VueRouter({ routes })\nnew Vue({ router }).$mount('#app')" },
  { "title": "Router-Link Example", "code": "<router-link to=\"/home\">Go to Home</router-link>" },
  { "title": "Named Routes", "code": "this.$router.push({ name: 'user', params: { userId: 123 }})" },
  
  { "title": "Programmatic Navigation with Named Routes", "code": "this.$router.push({ name: 'user', params: { userId: 123 } })" },
  { "title": "Route Parameters", "code": "<router-link :to=\"{ name: 'user', params: { id: user.id } }\">User</router-link>" },
  { "title": "Route Guards", "code": "beforeEnter(to, from, next) {\n  if (authUser) next();\n  else next(false);\n}" },
  { "title": "Async Components", "code": "const AsyncComponent = () => import('./MyComponent.vue');" },
  { "title": "Vuex Store Setup", "code": "const store = new Vuex.Store({\n  state: { count: 0 },\n  mutations: {\n    increment(state) {\n      state.count++;\n    }\n  }\n});" },
  { "title": "Vuex Map State", "code": "computed: {\n  ...mapState(['count'])\n}" },
  { "title": "Vuex Map Mutations", "code": "methods: {\n  ...mapMutations(['increment'])\n}" },
  { "title": "Using Vuex Actions", "code": "methods: {\n  incrementAsync() {\n    this.$store.dispatch('increment');\n  }\n}" },
  { "title": "Vuex Modules", "code": "const store = new Vuex.Store({\n  modules: {\n    a: {\n      state: { ... },\n      mutations: { ... }\n    }\n  }\n});" },
  { "title": "Using Plugins", "code": "Vue.use(MyPlugin);" },
  { "title": "Global Filters", "code": "Vue.filter('currency', function (value) {\n  return '$' + value.toFixed(2);\n});" },
  { "title": "Using Vue CLI", "code": "vue create my-project" },
  { "title": "Vue Router with History Mode", "code": "const router = new VueRouter({\n  mode: 'history',\n  routes: [...] \n});" },
  { "title": "Handling Multiple Routes", "code": "const routes = [\n  { path: '/foo', component: Foo },\n  { path: '/bar', component: Bar }\n];" },
  { "title": "Route Redirects", "code": "const routes = [{ path: '/', redirect: '/home' }];" },
  { "title": "Dynamic Route Matching", "code": "const routes = [{ path: '/user/:id', component: User }] ;" },
  { "title": "Creating a Simple Directive", "code": "Vue.directive('my-directive', {\n  bind(el, binding, vnode) {\n    // custom logic\n  }\n});" },
  { "title": "Using Axios for API Calls", "code": "axios.get('/api/data').then(response => this.data = response.data);" },
  { "title": "Handling Errors in Axios", "code": "axios.get('/api/data').catch(error => console.error(error));" },
  { "title": "Interceptors in Axios", "code": "axios.interceptors.request.use(config => {\n  // Modify config\n  return config;\n});" },
  { "title": "Fetching Data on Created Hook", "code": "created() {\n  axios.get('/api/items').then(response => this.items = response.data);\n}" },
  { "title": "Using the Fetch API", "code": "fetch('/api/data')\n  .then(response => response.json())\n  .then(data => this.items = data);" },
  { "title": "Mixing Async/Await with Axios", "code": "async fetchData() {\n  const response = await axios.get('/api/data');\n  this.data = response.data;\n}" },
  { "title": "Displaying Loading Indicators", "code": "<div v-if=\"loading\">Loading...</div>" },
  { "title": "Debouncing Input", "code": "computed: {\n  debouncedInput() {\n    return this.inputValue;\n  }\n}" },
  { "title": "Throttling Events", "code": "methods: {\n  handleScroll: _.throttle(function() { ... }, 100)\n}" },
  { "title": "Custom Filters", "code": "Vue.filter('uppercase', function (value) {\n  return value.toUpperCase();\n});" },
  { "title": "Event Bus for Communication", "code": "const EventBus = new Vue();\nEventBus.$emit('event-name', data);" },
  { "title": "Using Vue Devtools", "code": "<script src=\"https://cdn.jsdelivr.net/npm/vue-devtools\"></script>" },
  { "title": "Vue Router Navigation Guards", "code": "router.beforeEach((to, from, next) => { /* logic */ next(); });" },
  { "title": "Creating Reusable Components", "code": "Vue.component('my-component', {\n  props: ['prop1'],\n  template: '<div>{{ prop1 }}</div>'\n});" },
  { "title": "Slot Scoping", "code": "<template v-slot:header=\"data\">{{ data.title }}</template>" },
  { "title": "Vue Composition API", "code": "import { ref } from 'vue';\nconst count = ref(0);" },
  { "title": "Using Reactive with Composition API", "code": "import { reactive } from 'vue';\nconst state = reactive({ count: 0 });" },
  { "title": "Lifecycle Hooks in Composition API", "code": "import { onMounted } from 'vue';\nonMounted(() => { console.log('Mounted!'); });" },
  { "title": "Provide/Inject in Composition API", "code": "provide('key', value);\ninject('key');" },
  { "title": "Using Vuex with Composition API", "code": "import { useStore } from 'vuex';\nconst store = useStore();" },
  { "title": "Custom Composables", "code": "export function useCounter() {\n  const count = ref(0);\n  return { count };\n}" },
  { "title": "Using v-for with index", "code": "<div v-for=\"(item, index) in items\" :key=\"index\">{{ index }}: {{ item }}</div>" },
  { "title": "Setting up a New Project with Vue CLI", "code": "vue create my-project" },
  { "title": "Vue CLI Service", "code": "vue-cli-service serve" },
  { "title": "Building for Production", "code": "vue-cli-service build" },
  { "title": "Using .env Files", "code": "VUE_APP_API_URL=https://api.example.com" },
  
  { "title": "Creating a Simple Filter", "code": "Vue.filter('capitalize', function (value) {\n  if (!value) return '';\n  return value.charAt(0).toUpperCase() + value.slice(1);\n});" },
  { "title": "Vue 3 with Composition API", "code": "import { createApp } from 'vue';\ncreateApp(App).mount('#app');" },
  { "title": "Using v-bind with Object Syntax", "code": "<div v-bind=\"objectProps\"></div>" },
  { "title": "Computed Properties with Dependencies", "code": "computed: {\n  reversedMessage() {\n    return this.message.split('').reverse().join('');\n  }\n}" },
  { "title": "Form Validation with Vuelidate", "code": "import { required } from 'vuelidate/lib/validators';\nvalidations: {\n  name: { required }\n}" },
  { "title": "Using v-model with Custom Components", "code": "<my-input v-model=\"inputValue\"></my-input>" },
  { "title": "Dynamic CSS Classes", "code": "<div :class=\"{ active: isActive, 'text-danger': hasError }\"></div>" },
  { "title": "Using Scoped Slots", "code": "<template #default=\"{ item }\"><div>{{ item.name }}</div></template>" },
  { "title": "Accessing Data in Templates", "code": "<div>{{ message }}</div>" },
  { "title": "Handling Event Modifiers", "code": "<button @click.prevent=\"submit\">Submit</button>" },
  { "title": "Using v-if with v-else", "code": "<div v-if=\"isLoggedIn\">Welcome!</div><div v-else>Please log in.</div>" },
  { "title": "Dynamic Component with v-bind:is", "code": "<component :is=\"currentComponent\"></component>" },
  { "title": "Using watch for Deep Watching", "code": "watch: {\n  obj: {\n    handler(newVal) { ... },\n    deep: true\n  }\n}" },
  { "title": "Using v-on with Event Handlers", "code": "<button v-on:click=\"handleClick\">Click Me</button>" },
  { "title": "Handling Click Events with Methods", "code": "methods: {\n  handleClick() {\n    console.log('Button clicked');\n  }\n}" },
  { "title": "Using v-show", "code": "<div v-show=\"isVisible\">This is visible</div>" },
  { "title": "Creating a Global Component", "code": "Vue.component('global-component', { template: '<div>A global component!</div>' });" },
  { "title": "Event Handling in Child Components", "code": "<button @click=\"$emit('childClick')\">Click me</button>" },
  { "title": "Using Filters in Templates", "code": "<div>{{ message | capitalize }}</div>" },
  { "title": "Creating a Custom Directive", "code": "Vue.directive('focus', {\n  // bind, inserted, update, componentUpdated, unbind\n});" },
  { "title": "Dynamic Component Registration", "code": "Vue.component('dynamic-component', {\n  props: ['isActive'],\n  template: '<div :class=\"{ active: isActive }\"></div>'\n});" },
  { "title": "Creating a Vue Plugin", "code": "const MyPlugin = {\n  install(Vue) {\n    Vue.mixin({ /* mixin options */ });\n  }\n};" },
  { "title": "Accessing Component Methods", "code": "this.$refs.myComponent.myMethod();" },
  { "title": "Providing Global Configuration", "code": "Vue.prototype.$http = axios;" },
  { "title": "Using CSS Modules", "code": "<style module>\n.button { ... }\n</style>" },
  { "title": "Vue Router Lazy Loading", "code": "const User = () => import('./User.vue');" },
  { "title": "Defining Vuex Getters", "code": "getters: {\n  doubleCount: state => state.count * 2\n}" },
  { "title": "Using v-for with Index Key", "code": "<div v-for=\"(item, index) in items\" :key=\"index\">{{ item }}</div>" },
  { "title": "Creating Mixins", "code": "const myMixin = {\n  data() {\n    return { ... }\n  },\n  methods: { ... }\n};" },
  { "title": "Using Vue Router Redirects", "code": "const routes = [{ path: '/old', redirect: '/new' }];" },
  { "title": "Handling Nested Routes", "code": "const routes = [{\n  path: '/parent', component: Parent,\n  children: [{ path: 'child', component: Child }]\n}];" },
  { "title": "Creating a Simple Vue App", "code": "const app = createApp(App);\napp.mount('#app');" },
  { "title": "Using `async` with Methods", "code": "methods: {\n  async fetchData() {\n    const response = await axios.get('/api');\n    this.data = response.data;\n  }\n}" },
  { "title": "Using v-model with Radio Buttons", "code": "<input type=\"radio\" v-model=\"selected\" value=\"Option 1\"> Option 1" },
  { "title": "Using v-model with Checkboxes", "code": "<input type=\"checkbox\" v-model=\"checked\"> Check me" },
  { "title": "Managing Component State", "code": "data() {\n  return { count: 0 };\n}" },
  { "title": "Using Event Bus for Communication", "code": "const EventBus = new Vue();\nEventBus.$on('event-name', data => { /* handle event */ });" },
  { "title": "Vue Router Navigation After Hooks", "code": "router.afterEach((to, from) => { console.log('Navigated to: ' + to.path); });" },
  { "title": "Using $nextTick for DOM Updates", "code": "this.$nextTick(() => { /* DOM manipulation */ });" },
  { "title": "Using Computed Properties for Formatted Data", "code": "computed: {\n  formattedDate() {\n    return this.date.toLocaleDateString();\n  }\n}" },
  { "title": "Creating a Custom Event Bus", "code": "const EventBus = new Vue();\nVue.prototype.$bus = EventBus;" },
  { "title": "Handling API Errors Gracefully", "code": "axios.get('/api/data').catch(error => {\n  this.error = 'Error fetching data';\n});" },
  { "title": "Using Vue's Transition Effects", "code": "<transition name=\"fade\">\n  <div v-if=\"show\">Hello</div>\n</transition>" },
  { "title": "Using Functional Components", "code": "Vue.component('my-functional-component', {\n  functional: true,\n  render(h, context) { return h('div', context.props.text); }\n});" },
  { "title": "Using the `slot-scope` in Vue 2", "code": "<template v-slot:default=\"props\">\n  {{ props.text }}\n</template>" },
  { "title": "Combining Props with V-bind", "code": "<MyComponent v-bind=\"{ prop1: value1, prop2: value2 }\" />" }


  ]
